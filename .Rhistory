theme_minimal()
ggplot(gen_dane, aes(y = `2014`)) +
geom_boxplot(fill="slateblue", alpha = 0.2) +
labs(title = "Wykres pudełkowy dla dwóch grup", x = "Grupa", y = "Wartość") +
theme_minimal()
ggplot(gen_dane, aes(y = `2014`)) +
geom_boxplot(fill="slateblue", alpha = 0.2) +
labs(title = "Wykres pudełkowy dla dwóch grup", y = "Wartość") +
theme_minimal()
install.packages("tidyr")
install.packages("ggplot2")
library(tidyr)
library(tidyr)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
# Przekształcenie danych do formatu długiego
gen_dane_long <- pivot_longer(gen_dane, cols = c(`2014`, `2025`),
names_to = "Year", values_to = "Unemployed")
# Zobacz przekształcone dane
print(gen_dane_long)
# Utworzenie wykresu pudełkowego dla obu lat
ggplot(gen_dane_long, aes(x = Year, y = Unemployed, fill = Year)) +
geom_boxplot() +
labs(title = "Wykres pudełkowy ilości osób bezrobotnych",
x = "Rok",
y = "Ilość osób bezrobotnych uprzednio pracujących") +
theme_minimal()
library(ggplot2)
# Utworzenie wykresu pudełkowego dla obu lat
ggplot(gen_dane_long, aes(x = Year, y = Unemployed, fill = Year)) +
geom_boxplot() +
labs(title = "Wykres pudełkowy ilości osób bezrobotnych",
x = "Rok",
y = "Ilość osób bezrobotnych uprzednio pracujących") +
theme_minimal()
# Przekształcenie danych do formatu długiego
gen_dane_long <- pivot_longer(gen_dane, cols = c(`2014`, `2025`),
names_to = "Year", values_to = "Unemployed")
library(tidyr)
install.packages("tidyr")
install.packages("tidyr")
install.packages("tidyr")
(srednia_2014 <- mean(gen_dane$`2014`))
(srednia_2024 <- mean(gen_dane$`2024`))
(odchylenie_2014 <- sd(gen_dane$`2014`))
(odchylenie_2024 <- sd(gen_dane$`2024`))
(wspol_zm_2014 <- (odchylenie_2014 / srednia_2014) * 100)
(wspol_zm_2024 <- (odchylenie_2024 / srednia_2024) * 100)
(war_2014 <- var(gen_dane$`2014`))
(war_2024 <- var(gen_dane$`2024`))
gen_dane_long <- melt(gen_dane, variable.name = 'Rok', value.name = 'Bezrobotni')
#install.packages("reshape2")
library(reshape2)
gen_dane_long <- melt(gen_dane, variable.name = 'Rok', value.name = 'Bezrobotni')
View(gen_dane_long)
ggplot(gen_dane_long, aes(x = Rok, y = Bezrobotni, fill = Rok)) +
geom_boxplot() +
labs(title = "Wykres pudełkowy ilości osób bezrobotnych",
y = "Ilość osób bezrobotnych uprzednio pracujących") +
theme_minimal()
library(ggplot2)
ggplot(gen_dane_long, aes(x = Rok, y = Bezrobotni, fill = Rok)) +
geom_boxplot() +
labs(title = "Wykres pudełkowy ilości osób bezrobotnych",
y = "Ilość osób bezrobotnych uprzednio pracujących") +
theme_minimal()
ggplot(gen_dane, aes(x=`2014`)) +
geom_histogram( binwidth=1000,
color="darkblue", fill="lightblue") +
labs(title="Histogram osób bezrobotnych",x="Ilość osób", y="Ilość powiatów")
ggplot(gen_dane) +
stat_ecdf(aes(x = `2014`), geom = "step", color = "red") +
stat_ecdf(aes(x = `2024`), geom = "step", color = "blue") +
labs(title = "Wykres dystrybuanty",
x = "Ilość ludzi bezrobotnych", y = "Dystrybuanta") +
theme_minimal()
View(h1)
# Test t-Studenta dla dwóch próbek zależnych (te same powiaty w roznych latach)
t_test2 <- t.test(gen_dane$`2014`, gen_dane$`2024`,
paired = P, alternative = "two.sided")
# Test t-Studenta dla dwóch próbek zależnych (te same powiaty w roznych latach)
t_test2 <- t.test(gen_dane$`2014`, gen_dane$`2024`,
paired = P, alternative = "two.sided")
# Test t-Studenta dla dwóch próbek zależnych (te same powiaty w roznych latach)
t_test2 <- t.test(gen_dane$`2014`, gen_dane$`2024`,
paired = T, alternative = "two.sided")
print(t_test2)
# Test t-Studenta dla dwóch próbek zależnych (te same powiaty w roznych latach)
t_test2 <- t.test(gen_dane$`2014`, gen_dane$`2024`,
paired = T)
print(t_test2)
t_test2$p.value
wilc<-wilcox.test(gen_dane$`2014`, gen_dane$`2024`, paired = T)
print(wilc)
shapiro.test(gen_dane$`2014`)
shapiro.test(gen_dane$`2024`)
roznica <- gen_dane$`2024` - gen_dane$`2014`
shapiro.test(roznica)
wilc<-wilcox.test(gen_dane$`2014`, gen_dane$`2024`, paired = T)
print(wilc)
wilc<-wilcox.test(gen_dane$`2014`, gen_dane$`2024`, paired = T)
print(wilc)
wilc$p.value
fit <- lm(gen_dane$`2014` ~ gen_dane$`2024`)
# Utworzenie wykresu rozrzutu z linią regresji
plot(gen_dane$`2014`, gen_dane$`2024`, main = "Wykres rozrzutu z linią regresji", xlab = "Zmienna X", ylab = "Zmienna Y")
# Utworzenie wykresu rozrzutu z linią regresji
plot(gen_dane$`2014`, gen_dane$`2024`, main = "Wykres rozrzutu z linią regresji", xlab = "Zmienna X", ylab = "Zmienna Y")
abline(fit, col = "red")
# Utworzenie wykresu rozrzutu z linią regresji
ggplot(gen_dane_long, aes(x = Rok, y = Bezrobotni)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Wykres rozrzutu z linią regresji", x = "Zmienna X", y = "Zmienna Y")
set.seed(123)
x <- rnorm(100, mean = 50, sd = 10)  # Przykładowe dane x
y <- 2 * x + rnorm(100, mean = 0, sd = 5)  # Przykładowe dane y
# Stworzenie data frame
data <- data.frame(x = x, y = y)
# Wykres ggplot
ggplot(data, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Wykres rozrzutu z linią regresji", x = "Zmienna X", y = "Zmienna Y")
library(ggplot2)
# Dane dotyczące liczby bezrobotnych w styczniu z lat 2014 i 2024
bezrobotni <- c(500, 520)  # Przykładowe dane
# Stworzenie data frame
data <- data.frame(Rok = c("2014", "2024"), Bezrobotni = bezrobotni)
# Wykres ggplot
ggplot(data, aes(x = Rok, y = Bezrobotni)) +
geom_point() +
labs(title = "Porównanie liczby bezrobotnych w styczniu",
x = "Rok", y = "Liczba bezrobotnych") +
theme_minimal()
roznica <- gen_dane$`2024` - gen_dane$`2014`
# Wykres ggplot
ggplot(gen_dane_long, aes(x = Rok, y = Bezrobotni)) +
geom_point() +
labs(title = "Porównanie liczby bezrobotnych w styczniu",
x = "Rok", y = "Liczba bezrobotnych") +
theme_minimal()
wilc<-wilcox.test(gen_dane$`2014`, gen_dane$`2024`, paired = T)
# Utworzenie wykresu kwantyl-kwantyl
qq <- qqnorm(gen_dane$`2014`, main = "Wykres kwantyl-kwantyl", xlab = "Teoretyczne kwantyle", ylab = "Obserwowane kwantyle")
ggplot(gen_dane, aes(sample = 2014, q = 2024)) +
geom_qq() +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed") +
labs(title = "Wykres kwantyl-kwantyl",
x = "Kwantyle danych z 2014 roku",
y = "Kwantyle danych z 2024 roku") +
theme_minimal()
ggplot(gen_dane, aes(sample = `2014`, q = `2024`)) +
geom_qq() +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed") +
labs(title = "Wykres kwantyl-kwantyl",
x = "Kwantyle danych z 2014 roku",
y = "Kwantyle danych z 2024 roku") +
theme_minimal()
ggplot(gen_dane, aes(sample = `2014`, group = 1)) +
geom_qq(aes(sample = `2024`)) +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed") +
labs(title = "Wykres kwantyl-kwantyl",
x = "Kwantyle danych z 2014 roku",
y = "Kwantyle danych z 2024 roku") +
theme_minimal()
ggplot(gen_dane, aes(sample = `2014`, group = 1)) +
geom_qq(aes(sample = `2024`)) +
geom_abline(intercept = 1, slope = 1, color = "red", linetype = "dashed") +
labs(title = "Wykres kwantyl-kwantyl",
x = "Kwantyle danych z 2014 roku",
y = "Kwantyle danych z 2024 roku") +
theme_minimal()
ggplot(gen_dane, aes(sample = `2014`, group = 1)) +
geom_qq(aes(sample = `2024`)) +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed") +
labs(title = "Wykres kwantyl-kwantyl",
x = "Kwantyle danych z 2014 roku",
y = "Kwantyle danych z 2024 roku") +
theme_minimal()
qqline(dane, col = "blue")
# Utworzenie wykresu kwantyl-kwantyl
qq <- qqnorm(gen_dane$`2014`, main = "Wykres kwantyl-kwantyl", xlab = "Teoretyczne kwantyle", ylab = "Obserwowane kwantyle")
ggplot(gen_dane, aes(sample = `2014`, group = 1)) +
geom_qq(aes(sample = `2024`)) +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed") +
labs(title = "Wykres kwantyl-kwantyl",
x = "Kwantyle danych z 2014 roku",
y = "Kwantyle danych z 2024 roku") +
theme_minimal()
ggplot(gen_dane_long, aes(x = Rok, y = Bezrobotni)) +
geom_point() +
labs(title = "Wykres różnicy liczby bezrobotnych",
x = "Rok", y = "Różnica w liczbie bezrobotnych") +
theme_minimal()
data <- data.frame(Rok = rep(c("2014", "2024"), each = 100),
Bezrobotni = roznice)
# Wykres ggplot
ggplot(data, aes(x = Rok, y = Bezrobotni)) +
geom_point() +
labs(title = "Wykres różnicy liczby bezrobotnych",
x = "Rok", y = "Różnica w liczbie bezrobotnych") +
theme_minimal()
data <- data.frame(Rok = rep(c("2014", "2024"), each = 100),
Bezrobotni = roznica)
ggplot(gen_dane, aes(x=`2014`)) +
geom_histogram( binwidth=1000,
color="darkblue", fill="lightblue") +
labs(title="Histogram osób bezrobotnych(przedział 1000 osób) w 2014 roku",
x="Ilość osób", y="Ilość powiatów") +
theme(legend.position = "top")
ggplot(gen_dane, aes(x=`2014`)) +
geom_histogram( binwidth=1000,
color="darkblue", fill="lightblue") +
labs(title="Histogram osób bezrobotnych(przedział 1000 osób) w 2014 roku",
x="Ilość osób", y="Ilość powiatów") +
theme(legend.position = "top")
library(ggplot2)
ggplot(gen_dane, aes(x=`2014`)) +
geom_histogram( binwidth=1000,
color="darkblue", fill="lightblue") +
labs(title="Histogram osób bezrobotnych(przedział 1000 osób) w 2014 roku",
x="Ilość osób", y="Ilość powiatów") +
theme(legend.position = "top")
ggplot(gen_dane) +
stat_ecdf(aes(x = `2014`), geom = "step", color = "red") +
stat_ecdf(aes(x = `2024`), geom = "step", color = "blue") +
labs(title = "Wykres dystrybuanty",
x = "Ilość ludzi bezrobotnych", y = "Dystrybuanta") +
theme_minimal() +
theme(legend.position = "top")
ggplot(gen_dane) +
stat_ecdf(aes(x = `2014`), geom = "step", color = "red") +
stat_ecdf(aes(x = `2024`), geom = "step", color = "blue") +
labs(title = "Wykres dystrybuanty",
x = "Ilość ludzi bezrobotnych", y = "Dystrybuanta") +
theme_minimal() +
theme(legend.position = "right")
ggplot(gen_dane) +
stat_ecdf(aes(x = `2014`), geom = "step", color = "red") +
stat_ecdf(aes(x = `2024`), geom = "step", color = "blue") +
labs(title = "Wykres dystrybuanty",
x = "Ilość ludzi bezrobotnych", y = "Dystrybuanta",
color = "dataset") +
theme_minimal() +
theme(legend.position = "right")
ggplot(gen_dane) +
stat_ecdf(aes(x = `2014`), geom = "step") +
stat_ecdf(aes(x = `2024`), geom = "step") +
labs(title = "Wykres dystrybuanty",
x = "Ilość ludzi bezrobotnych", y = "Dystrybuanta",
color = "dataset") +
theme_minimal() +
theme(legend.position = "right")
data1 <- c(rep(1, 10), rep(2, 2), rep(3, 1))
data2 <- c(rep(1, 8), rep(5, 1), rep(10, 1))
# Create a data frame for ggplot
data <- data.frame(
value = c(data1, data2),
dataset = rep(c("Dataset 1", "Dataset 2"), times = c(length(data1), length(data2)))
)
# Plot empirical cumulative distribution functions (ECDF) with legend
ggplot(data, aes(x = value, color = dataset)) +
stat_ecdf(size = 1) +
labs(title = "Empirical Cumulative Distribution Functions",
x = "Value",
y = "ECDF",
color = "Dataset") +  # Label for legend
theme_minimal() +
theme(legend.position = "top")  # Optional: to position the legend at the top
# Plot empirical cumulative distribution functions (ECDF) with legend
ggplot(gen_dane_long, aes(x = Rok, color = bezrobotni)) +
stat_ecdf(size = 1) +
labs(title = "Empirical Cumulative Distribution Functions",
x = "Value",
y = "ECDF",
color = "Dataset") +  # Label for legend
theme_minimal() +
theme(legend.position = "top")  # Optional: to position the legend at the top
# Plot empirical cumulative distribution functions (ECDF) with legend
ggplot(gen_dane_long, aes(x = rok, color = bezrobotni)) +
stat_ecdf(size = 1) +
labs(title = "Empirical Cumulative Distribution Functions",
x = "Value",
y = "ECDF",
color = "Dataset") +  # Label for legend
theme_minimal() +
theme(legend.position = "top")  # Optional: to position the legend at the top
data1 <- c(rep(1, 10), rep(2, 2), rep(3, 1))
data2 <- c(rep(1, 8), rep(5, 1), rep(10, 1))
# Create a data frame for ggplot
data <- data.frame(
value = c(data1, data2),
dataset = rep(c("Dataset 1", "Dataset 2"), times = c(length(data1), length(data2)))
)
# Plot empirical cumulative distribution functions (ECDF) with legend
ggplot(data, aes(x = value, color = dataset)) +
stat_ecdf(size = 1) +
labs(title = "Empirical Cumulative Distribution Functions",
x = "Value",
y = "ECDF",
color = "Dataset") +  # Label for legend
theme_minimal() +
theme(legend.position = "top")  # Optional: to position the legend at the top
View(data)
View(gen_dane_long)
# Plot empirical cumulative distribution functions (ECDF) with legend
ggplot(gen_dane_long, aes(x = Bezrobotni, color = Rok)) +
stat_ecdf(size = 1) +
labs(title = "Empirical Cumulative Distribution Functions",
x = "Value",
y = "ECDF",
color = "Dataset") +  # Label for legend
theme_minimal() +
theme(legend.position = "top")  # Optional: to position the legend at the top
# Plot empirical cumulative distribution functions (ECDF) with legend
ggplot(gen_dane_long, aes(x = Bezrobotni, color = Rok)) +
stat_ecdf() +
labs(title = "Empirical Cumulative Distribution Functions",
x = "Value",
y = "ECDF",
color = "Dataset") +  # Label for legend
theme_minimal() +
theme(legend.position = "top")  # Optional: to position the legend at the top
ggplot(gen_dane) +
stat_ecdf(aes(x = `2014`), geom = "step", color = "red") +
stat_ecdf(aes(x = `2024`), geom = "step", color = "blue") +
labs(title = "Wykres dystrybuanty",
x = "Ilość ludzi bezrobotnych", y = "Dystrybuanta",
color = "Rok") +
# Wykres dystrybuanty
ggplot(gen_dane_long, aes(x = Bezrobotni, color = Rok)) +
stat_ecdf() +
labs(title = "Wykres dystrybuanty",
x = "Ilość ludzi bezrobotnych",
y = "Dystrybuanta",
color = "Rok") +
+  # Label for legend
theme_minimal() +
theme(legend.position = "top")  # Optional: to position the legend at the top
ggplot(gen_dane) +
stat_ecdf(aes(x = `2014`), geom = "step", color = "red") +
stat_ecdf(aes(x = `2024`), geom = "step", color = "blue") +
labs(title = "Wykres dystrybuanty",
x = "Ilość ludzi bezrobotnych", y = "Dystrybuanta",
color = "Rok") +
# Wykres dystrybuanty
ggplot(gen_dane_long, aes(x = Bezrobotni, color = Rok)) +
stat_ecdf() +
labs(title = "Wykres dystrybuanty",
x = "Ilość ludzi bezrobotnych",
y = "Dystrybuanta",
color = "Rok") +
+  # Label for legend
theme_minimal() +
theme(legend.position = "top")  # Optional: to position the legend at the top
ggplot(gen_dane) +
stat_ecdf(aes(x = `2014`), geom = "step", color = "red") +
stat_ecdf(aes(x = `2024`), geom = "step", color = "blue") +
labs(title = "Wykres dystrybuanty",
x = "Ilość ludzi bezrobotnych", y = "Dystrybuanta",
color = "Rok") +
# Wykres dystrybuanty
ggplot(gen_dane_long, aes(x = Bezrobotni, color = Rok)) +
stat_ecdf() +
labs(title = "Wykres dystrybuanty",
x = "Ilość ludzi bezrobotnych",
y = "Dystrybuanta") +
+  # Label for legend
theme_minimal() +
theme(legend.position = "top")  # Optional: to position the legend at the top
# Plot empirical cumulative distribution functions (ECDF) with legend
ggplot(gen_dane_long, aes(x = Bezrobotni, color = Rok)) +
stat_ecdf(size = 1) +
labs(title = "Empirical Cumulative Distribution Functions",
x = "Value",
y = "ECDF",
color = "Dataset") +  # Label for legend
theme_minimal() +
theme(legend.position = "top")  # Optional: to position the legend at the top
ggplot(gen_dane_long, aes(x = Bezrobotni, color = Rok)) +
stat_ecdf(size = 1) +
labs(title = "Empirical Cumulative Distribution Functions",
x = "Value",
y = "ECDF",
color = "Dataset") +  # Label for legend
theme_minimal() +
theme(legend.position = "top")  # Optional: to position the legend at the top
ggplot(gen_dane_long, aes(x = Bezrobotni, color = Rok)) +
stat_ecdf() +
labs(title = "Empirical Cumulative Distribution Functions",
x = "Value",
y = "ECDF",
color = "Dataset") +  # Label for legend
theme_minimal() +
theme(legend.position = "top")  # Optional: to position the legend at the top
ggplot(gen_dane_long, aes(x = Bezrobotni, color = Rok)) +
stat_ecdf() +
labs(title = "Wykres dystrybuanty",
x = "Ilość ludzi bezrobotnych",
y = "Dystrybuanta",
color = "Rok") +  # Label for legend
theme_minimal() +
theme(legend.position = "top")  # Optional: to position the legend at the top
library(ggplot2)
ggplot(gen_dane_long, aes(x = Bezrobotni, color = Rok)) +
stat_ecdf(size = 1) +
labs(title = "Wykres dystrybuanty",
x = "Ilość ludzi bezrobotnych",
y = "Dystrybuanta",
color = "Rok") +  # Label for legend
theme_minimal() +
theme(legend.position = "top")  # Optional: to position the legend at the top
ggplot(gen_dane_long, aes(x = Bezrobotni, color = Rok)) +
stat_ecdf(size = 1) +
labs(title = "Wykres dystrybuanty",
x = "Ilość ludzi bezrobotnych",
y = "Dystrybuanta",
color = "Rok") +
theme_minimal() +
theme(legend.position = "right")
## Hipoteza alternatywna
### Mediana ludzi bezrobotnych zmniejszyła się
lev <- leveneTest(liczba_bezrobotnych ~ rok, data = data)
test_t <- t.test(gen_dane$`2014`, gen_dane$`2024`, paired = TRUE)
print(test_t)
test_t$p.value
## Hipoteza alternatywna
### Mediana ludzi bezrobotnych zmniejszyła się
library(car)
lev <- leveneTest(liczba_bezrobotnych ~ rok, data = data)
df <- data.frame(
value = c(1.2, 2.3, 3.4, 2.1, 3.2, 4.5, 5.6, 4.2, 3.1, 2.5),
group = factor(c('A', 'A', 'A', 'B', 'B', 'B', 'C', 'C', 'C', 'C'))
)
leveneTest(value ~ group, data = df)
# p value jest mniejsze niz 0,05 więc hipoteza zerowa jest nieprawdziwa
install.packages("car")
library(car)
df <- data.frame(
value = c(1.2, 2.3, 3.4, 2.1, 3.2, 4.5, 5.6, 4.2, 3.1, 2.5),
group = factor(c('A', 'A', 'A', 'B', 'B', 'B', 'C', 'C', 'C', 'C'))
)
leveneTest(value ~ group, data = df)
lev <- leveneTest(liczba_bezrobotnych ~ rok, data = data)
lev <- leveneTest(gen_dane$`2014` ~ rok, data = data)
lev
lev <- leveneTest(gen_dane_long ~ rok, data = data)
lev <- leveneTest(gen_dane ~ c(2014, 2024), data = data)
lev <- leveneTest(gen_dane ~ c('2014', '2024'), data = data)
l1 <-leveneTest(value ~ group, data = df)
l1$`Pr(>F)`
lev <- leveneTest(gen_dane_long$Bezrobotni ~
gen_dane_long$Rok, data = data)
lev
lev$`Pr(>F)`
lev <- leveneTest(gen_dane_long$Bezrobotni ~
gen_dane_long$Rok, data = data)
lev$`Pr(>F)`
print(lev)
lev <- leveneTest(Bezrobotni ~ Rok, data = gen_dane_long)
lev$`Pr(>F)`
print(lev)
lev <- leveneTest(Bezrobotni ~ Rok, data = gen_dane_long,
location = 'mean')
lev$`Pr(>F)`
print(lev)
wilc <- wilcox.test(before, after, paired = TRUE)
wilc <- wilcox.test(gen_dane$`2014`, gen_dane$`2024`,
paired = TRUE)
print(wilc)
wilc$p.value
shapiro_test_year1 <- shapiro.test(gen_dane$`2014`)
print(shapiro_test_year1)
shapiro_test_2014 <- shapiro.test(gen_dane$`2014`)
shapiro_test_2024 <- shapiro.test(gen_dane$`2024`)
print(shapiro_test_year2)
shapiro_test_2014 <- shapiro.test(gen_dane$`2014`)
print(shapiro_test_2014)
shapiro_test_2024 <- shapiro.test(gen_dane$`2024`)
print(shapiro_test_2024)
shapiro_test_2014 <- shapiro.test(gen_dane$`2014`)
print(shapiro_test_2014)
shapiro_test_2014$p.value
shapiro_test_2024 <- shapiro.test(gen_dane$`2024`)
print(shapiro_test_2024)
shapiro_test_2024$p.value
qqplot(gen_dane$`2014`, gen_dane$`2024`, main = "QQ Plot for Year 1 vs Year 2",
xlab = "Quantiles of Year 1", ylab = "Quantiles of Year 2")
# Dodanie linii referencyjnej
abline(0, 1, col = "red")
year1 <- c(120, 150, 130, 170, 160, 180, 140, 190, 150, 160)
year2 <- c(110, 140, 135, 165, 155, 175, 145, 185, 148, 158)
# Utworzenie QQ plotu
qqplot(year1, year2, main = "QQ Plot for Year 1 vs Year 2",
xlab = "Quantiles of Year 1", ylab = "Quantiles of Year 2")
# Dodanie linii referencyjnej
abline(0, 1, col = "red")
# Utworzenie wykresu kwantyl-kwantyl
qq <- qqnorm(gen_dane$`2014`, main = "Wykres kwantyl-kwantyl", xlab = "Teoretyczne kwantyle", ylab = "Obserwowane kwantyle")
qqplot(gen_dane$`2014`, gen_dane$`2024`, main = "QQ Plot for Year 1 vs Year 2",
xlab = "Quantiles of Year 1", ylab = "Quantiles of Year 2")
# Dodanie linii referencyjnej
abline(0, 1, col = "red")
qqplot(gen_dane$`2014`, gen_dane$`2024`,
main = "Wykres kwantyl-kwantyl dla 2014 vs 2024",
xlab = "kwantyle roku 2014", ylab = "kwantyle roku 2024")
# Dodanie linii referencyjnej
abline(0, 1, col = "red")
